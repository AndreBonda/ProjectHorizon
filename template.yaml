---
AWSTemplateFormatVersion: '2010-09-09'
Description: An application to process and transform images effortlessly in the cloud
Resources:
  # ===== S3 Buckets =====
  S3DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-destination-bucket"
  
  S3SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-source-bucket"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ImageOptimizerLambda.Arn
  
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageOptimizerLambda
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${AWS::AccountId}-source-bucket'
  
  # ===== Lambda ImageOptimizer =====
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      # trust policy
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      # managed policy to write logs in cloudwatch
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      # inline policies
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-source-bucket/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-destination-bucket/*"
  
  ImageOptimizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ImageOptimizer
      Runtime: dotnet8
      Handler: ImageOptimizerLambda::ImageOptimizerLambda.Functions_FunctionHandlerAsync_Generated::FunctionHandlerAsync
      Code:
        S3Bucket: !Sub "${AWS::AccountId}-deployment-bucket"
        S3Key: "lambda-optimizer-deployment.zip"
      MemorySize: 512
      Timeout: 30
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Environment:
        Variables:
          S3_SOURCE_BUCKET_NAME: !Sub "${AWS::AccountId}-source-bucket"
          S3_DESTINATION_BUCKET_NAME: !Sub "${AWS::AccountId}-destination-bucket"
  
  # ===== Lambda ImageUrlGenerator =====
  LambdaUrlGeneratorRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SourceBucketWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${AWS::AccountId}-source-bucket/*"
          
  ImageUrlGeneratorLambda:
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: ImageUrlGenerator
      Runtime: dotnet8
      Handler: ImageUrlGeneratorLambda::ImageUrlGeneratorLambda.Functions_FunctionHandlerAsync_Generated::FunctionHandlerAsync
      Code:
        S3Bucket: !Sub "${AWS::AccountId}-deployment-bucket"
        S3Key: "lambda-url-generator-deployment.zip"
      MemorySize: 512
      Timeout: 30
      Architectures:
        - x86_64
      Role: !GetAtt LambdaUrlGeneratorRole.Arn

  # ===== API Gateway =====
  ImageApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "Project Horizon Gateway"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - "Content-Type"
        AllowMethods:
          - "GET"
          - "OPTIONS"
        AllowOrigins:
          - "*"
  
  ImageApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties: 
      ApiId: !Ref ImageApiGateway
      StageName: "prod"
      AutoDeploy: true
  
  ImageApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties: 
      ApiId: !Ref ImageApiGateway
      RouteKey: "GET /presigned-url"
      Target: !Sub "integrations/${ImageApiIntegration}"

  ImageApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ImageApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations"
        - LambdaArn: !GetAtt ImageUrlGeneratorLambda.Arn
      PayloadFormatVersion: "2.0"

  ApiGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ImageUrlGeneratorLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ImageApiGateway}/*/*"

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ImageApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"
